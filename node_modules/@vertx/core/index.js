/*
 * Copyright 2020 ES4X
 *
 * ES4X licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/// <reference types="@vertx/core" />

/**
 * @typedef { import("@vertx/core") } Java
 */
module.exports = {
  AsyncResult: Java.type('io.vertx.core.AsyncResult'),
  JsonObject: Java.type('io.vertx.core.json.JsonObject'),
  JsonArray: Java.type('io.vertx.core.json.JsonArray'),

  AsyncFile: Java.type('io.vertx.core.file.AsyncFile'),
  AsyncMap: Java.type('io.vertx.core.shareddata.AsyncMap'),
  Buffer: Java.type('io.vertx.core.buffer.Buffer'),
  CLI: Java.type('io.vertx.core.cli.CLI'),
  CommandLine: Java.type('io.vertx.core.cli.CommandLine'),
  Context: Java.type('io.vertx.core.Context'),
  Cookie: Java.type('io.vertx.core.http.Cookie'),
  Counter: Java.type('io.vertx.core.shareddata.Counter'),
  DatagramPacket: Java.type('io.vertx.core.datagram.DatagramPacket'),
  DatagramSocket: Java.type('io.vertx.core.datagram.DatagramSocket'),
  DeliveryContext: Java.type('io.vertx.core.eventbus.DeliveryContext'),
  DnsClient: Java.type('io.vertx.core.dns.DnsClient'),
  EventBus: Java.type('io.vertx.core.eventbus.EventBus'),
  FileProps: Java.type('io.vertx.core.file.FileProps'),
  FileSystem: Java.type('io.vertx.core.file.FileSystem'),
  FileSystemProps: Java.type('io.vertx.core.file.FileSystemProps'),
  HttpClient: Java.type('io.vertx.core.http.HttpClient'),
  HttpClientRequest: Java.type('io.vertx.core.http.HttpClientRequest'),
  HttpClientResponse: Java.type('io.vertx.core.http.HttpClientResponse'),
  HttpConnection: Java.type('io.vertx.core.http.HttpConnection'),
  HttpFrame: Java.type('io.vertx.core.http.HttpFrame'),
  HttpHeaders: Java.type('io.vertx.core.http.HttpHeaders'),
  HttpServer: Java.type('io.vertx.core.http.HttpServer'),
  HttpServerFileUpload: Java.type('io.vertx.core.http.HttpServerFileUpload'),
  HttpServerRequest: Java.type('io.vertx.core.http.HttpServerRequest'),
  HttpServerResponse: Java.type('io.vertx.core.http.HttpServerResponse'),
  JsonEvent: Java.type('io.vertx.core.parsetools.JsonEvent'),
  JsonParser: Java.type('io.vertx.core.parsetools.JsonParser'),
  JsonPointer: Java.type('io.vertx.core.json.pointer.JsonPointer'),
  JsonPointerIterator: Java.type('io.vertx.core.json.pointer.JsonPointerIterator'),
  LocalMap: Java.type('io.vertx.core.shareddata.LocalMap'),
  Lock: Java.type('io.vertx.core.shareddata.Lock'),
  Measured: Java.type('io.vertx.core.metrics.Measured'),
  Message: Java.type('io.vertx.core.eventbus.Message'),
  MessageConsumer: Java.type('io.vertx.core.eventbus.MessageConsumer'),
  MessageProducer: Java.type('io.vertx.core.eventbus.MessageProducer'),
  MultiMap: Java.type('io.vertx.core.MultiMap'),
  MxRecord: Java.type('io.vertx.core.dns.MxRecord'),
  NetClient: Java.type('io.vertx.core.net.NetClient'),
  NetServer: Java.type('io.vertx.core.net.NetServer'),
  NetSocket: Java.type('io.vertx.core.net.NetSocket'),
  Pipe: Java.type('io.vertx.core.streams.Pipe'),
  Promise: Java.type('io.vertx.core.Promise'),
  Pump: Java.type('io.vertx.core.streams.Pump'),
  ReadStream: Java.type('io.vertx.core.streams.ReadStream'),
  RecordParser: Java.type('io.vertx.core.parsetools.RecordParser'),
  SelfSignedCertificate: Java.type('io.vertx.core.net.SelfSignedCertificate'),
  ServerWebSocket: Java.type('io.vertx.core.http.ServerWebSocket'),
  SharedData: Java.type('io.vertx.core.shareddata.SharedData'),
  SocketAddress: Java.type('io.vertx.core.net.SocketAddress'),
  SrvRecord: Java.type('io.vertx.core.dns.SrvRecord'),
  StreamBase: Java.type('io.vertx.core.streams.StreamBase'),
  TimeoutStream: Java.type('io.vertx.core.TimeoutStream'),
  Vertx: Java.type('io.vertx.core.Vertx'),
  WebSocket: Java.type('io.vertx.core.http.WebSocket'),
  WebSocketBase: Java.type('io.vertx.core.http.WebSocketBase'),
  WebSocketFrame: Java.type('io.vertx.core.http.WebSocketFrame'),
  WorkerExecutor: Java.type('io.vertx.core.WorkerExecutor'),
  WriteStream: Java.type('io.vertx.core.streams.WriteStream')
};
